#!/bin/bash
#
# jgen -- Generates JSON schemas for instance documents
#
# Joan Ordinas <jordinas@gmail.com>

# Script version
declare -r VERSION='0.1'

# This script name
declare -r SELF="${0##*/}"

# JQ script
declare -r JQ="${0}.jq"

# Data and modules directory: edit if necessary
declare -r JBOL='/usr/local/share/jbol'

########################################################################

# Bash options
set -o errexit -o noglob -o nounset -o pipefail
shopt -s expand_aliases

# Print text on screen
alias print='echo 1>&2 -e'
alias message='cat 1>&2'

# Abort with message
function fatal {
    print "Error: $*"
    exit 1
}

# Show help
function help {
    message <<EOF
${SELF} -- Generates JSON schemas for instance documents

Usage: ${SELF} [-h | --help | -v | --version]
       ${SELF} [options...] [files...]

${SELF} generates a JSON schema for each instance document read from the
standard input.  One or more files may be specified, in which case ${SELF} will
read input from those instead.

Options:
    -a, --verbose-array     Add array constraints
    -c, --compact           Compact output
    -h, --help              Show this help
    -k, --sort-keys         Sort output keys 
    -n, --verbose-number    Add number constraints
    -o, --verbose-object    Add object constraints
    -r, --required          Add the 'required' keyword
    -s, --verbose-string    Add string constraints
    -v, --version           Print version information
EOF
    exit $(( $# == 0 ))
}

# Print usage message and exit
function usage {
    message <<EOF
Unknown option: $1
Usage: ${SELF} [-h | --help | -v | --version]
       ${SELF} [options] [file]
EOF
    exit 1
}

# Print version and exit
function version {
    print "${SELF} ${VERSION}"
    exit 0
}

########################################################################

function main {
    local required='false' compact='false' \
          vnumber='false' vstring='false' varray='false' vobject='false'
    local -i compact=0 skeys=0

    local opt
    while getopts :hacknorsv-: opt; do
        case $opt in
            h) help ;;
            a) varray='true' ;;
            c) compact=1 ;;
            k) skeys=1 ;;
            n) vnumber='true' ;;
            o) vobject='true' ;;
            r) required='true' ;;
            s) vstring='true' ;;
            v) version ;;
            -) case $OPTARG in
                   help) help ;;
                   compact) compact=1 ;;
                   required) required='true' ;;
                   sort-keys) skeys=1 ;;
                   verbose-array) varray='true' ;;
                   verbose-number) vnumber='true' ;;
                   verbose-object) vobject='true' ;;
                   verbose-string) vstring='true' ;;
                   version) version ;;
                   *) usage "--${OPTARG}" ;;
                esac
                ;;
            ?) usage "-${OPTARG}" ;;
        esac
    done

    shift $((OPTIND-1))

    [[ -e $JBOL ]] || fatal "${JBOL} directory does not exists"

    local COMPACT='' SORT_KEYS=''
    local -a REQUIRED VARRAY VNUMBER VOBJECT VSTRING

    if ((compact)); then COMPACT="--compact-output"; fi
    if ((skeys)); then SORT_KEYS="--sort-keys"; fi

    REQUIRED=('--argjson' 'opt_required'       $required)
    VARRAY=('--argjson'   'opt_array_verbose'  $varray)
    VNUMBER=('--argjson'  'opt_number_verbose' $vnumber)
    VOBJECT=('--argjson'  'opt_object_verbose' $vobject)
    VSTRING=('--argjson'  'opt_string_verbose' $vstring)

    # run the JQ script
    jq  -L ${JBOL}          \
        --from-file ${JQ}   \
        ${SORT_KEYS}        \
        ${COMPACT}          \
        "${REQUIRED[@]}"    \
        "${VARRAY[@]}"      \
        "${VNUMBER[@]}"     \
        "${VSTRING[@]}"     \
        "${VOBJECT[@]}"     \
        "$@"
}

# Call main and exit
main "$@"

exit

# vim:syntax=sh:ai:sw=4:ts=4:et
