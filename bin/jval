#!/bin/bash
#
# jval -- Validates instance documents against a JSON schema
#
# Joan Ordinas <jordinas@gmail.com>

# Script version
declare -r VERSION='0.1'

# This script name
declare -r SELF="${0##*/}"

# JQ script
declare -r JQ="${0}.jq"

# Data and modules directory: edit if necessary
declare -r JBOL='/usr/local/share/jbol'

# Meta schemas
declare -r METASCHEMA="${JBOL}/schemata/schema.schema.json"
declare -r HYPERSCHEMA="${JBOL}/schemata/hyper-schema_expanded.schema.json"

########################################################################

# Bash options
set -o errexit -o noglob -o nounset -o pipefail
shopt -s expand_aliases

# Print text on screen
alias print='echo 1>&2 -e'
alias message='cat 1>&2'

# Abort with message
function fatal {
    print "Error: $*"
    exit 1
}

# Show help
function help {
    message <<EOF
${SELF} -- Validates instance documents against a JSON schema

Usage: ${SELF} [-h | --help | -v | --version]
       ${SELF} [options...] schema [file...]

${SELF} validates against an schema a JSON instance document read from the
standard input.  One or more files may be specified, in which case jval will
read input from those instead.

Options:
    -h, --help              Show this help
    -q, --quiet             Suppress all normal output (status is zero or one)
    -s, --schema            Validates a JSON schema against the Schema meta-schema
    -v, --version           Print version information
    -y, --hyper             Validates a JSON schema against the Hyper-Schema meta-schema
EOF
    exit $(( $# == 0 ))
}

# Print usage message and exit
function usage {
    message <<EOF
Unknown option: $1
Usage: ${SELF} [-h | --help | -v | --version]
       ${SELF} [options] schema [file]
EOF
    exit 1
}

# Print version and exit
function version {
    print "${SELF} ${VERSION}"
    exit 0
}

# Validates document
function validate {
    local schema=$1; shift

    jq  -L $JBOL                        \
        --from-file $JQ                 \
        --raw-output                    \
        --slurpfile SCHEMA "$schema"    \
        "$@" 2>&1
}

########################################################################

function main {
    local -i quiet=0 metaschema=0 hyperschema=0

    local opt
    while getopts :hqsvy-: opt; do
        case $opt in
            h) help ;;
            q) quiet=1 ;;
            s) metaschema=1 ;;
            y) hyperschema=1 ;;
            v) version ;;
            -) case $OPTARG in
                   help) help ;;
                   quiet) quiet=1 ;;
                   schema) metaschema=1 ;;
                   hyper) hyperschema=1 ;;
                   version) version ;;
                   *) usage "--${OPTARG}";;
               esac
               ;;
            ?) usage "-${OPTARG}";;
        esac
    done

    shift $((OPTIND-1))
    (( $# > 0 )) || help
    (( metaschema+hyperschema < 2 )) || help

    [[ -e $JBOL ]]        || fatal "modules directory does not exists"
    [[ -e $METASCHEMA ]]  || fatal "missing Schema meta-schema"
    [[ -e $HYPERSCHEMA ]] || fatal "missing Hyper-Schema meta-schema"

    local schema diagnostic
    if ((metaschema)); then
        schema=$METASCHEMA
    elif ((hyperschema)); then
        schema=$HYPERSCHEMA
    else
        schema=$1; shift
    fi

    diagnostic=$(validate $schema "$@")
    if [[ -z "$diagnostic" ]]; then
        return 0
    else
        (( quiet )) || echo "$diagnostic"
        return 1
    fi
}

# Call main and exit
main "$@"

exit

# vim:syntax=sh:ai:sw=4:ts=4:et
