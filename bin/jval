#!/bin/bash
#
# Validates an instance document against a JSON schema.
#

# Bash options
set -o errexit -o noglob -o nounset -o pipefail
shopt -s expand_aliases

# jval version
declare -r VERSION='0.1'

# This script name
declare -r SELF="${0##*/}"

# JQ script
declare -r JQ="${0}.jq"

# JBOL modules path
declare -r JBOL='-L/usr/local/share/jbol'

# Meta schema
declare -r METASCHEMA='/usr/local/share/jbol/schemata/schema.schema.json'

# Print text on screen
alias print='echo 1>&2 -e'

# Abort with message
function fatal {
    print "Error: $*"
    exit 1
}

# Show help
function help {
    cat 1>&2 <<EOF
${SELF} - validates a JSON document
Usage: ${SELF} [options] schema [file]

${SELF} validates against an schema a JSON instance document read from a file
or the standard input.

Options:
    -h, --help              Show this help
    -s, --schema            Validates JSON schema against the meta schema
EOF
    exit $(( $# == 0 ))
}

# Print version and exit
function version {
    print "$SELF $VERSION"
    exit 0
}

# Print usage message and exit
function usage {
    print "Unknown option: $1\n"
    print "Usage: ${SELF} [-h | --help | -V]"
    print "Usage: ${SELF} [options] schema [file]"
    exit 1
}

# Validates document
function validate {
    local schema=$1
    jq $JBOL                        \
        --from-file ${JQ}           \
        --raw-output                \
        --slurpfile SCHEMA $schema  \
        "$@"
}

# Entry point
function main {
    local -i metaschema=0

    local opt
    while getopts :Vhs-: opt; do
        case $opt in
            V) version ;;
            h) help ;;
            s) metaschema=1 ;;
            -) case $OPTARG in
                   version) version ;;
                   help) help ;;
                   schema) metaschema=1 ;;
                   *) usage "--$OPTARG";;
               esac
               ;;
            ?) usage "-$OPTARG";;
        esac
    done

    shift $((OPTIND-1))
    (( $# > 0 )) || help

    local schema diagnostic
    if ((metaschema)); then
        [[ -e $METASCHEMA ]] ||
			fatal "missing $METASCHEMA meta schema"
        schema=$METASCHEMA
    else
        schema=$1; shift
    fi

    diagnostic=$(validate $schema "$@")
    if [[ -z $diagnostic ]]; then
        return 0
    else
        print $diagnostic
        return 1
    fi
}

# Call main and exit
main "$@"

exit

# vim:syntax=sh:ai:sw=4:ts=4:et
