#########################################################################
# Set array operations
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

include "array/set"; index(3)
[2,4,5,6,7,3,2]
5

include "array/set"; .[[3]]
[2,4,5,6,7,3,2]
[5]

include "array/set"; .[[2]]
[2,4,5,6,7,3,2]
[0,6]

include "array/set"; insert(2) | insert(1)
[5,4,3]
[5,4,3,2,1]

include "array"; remove(2)
[5,4,3]
[5,4,3]

include "array"; remove(2)
[5,2,4,3,2,2]
[5,4,3]

include "array/set"; remove(2)
[5,4,3]
[5,4,3]

include "array/set"; remove(2)
[5,2,4,3]
[5,4,3]

include "array"; index(2)
[5,2,4,3]
1

include "array/set"; 3 | element([4,2,5,3,2,1])
null
true

include "array/set"; [4,2,5,3,2,1] | member(2)
null
true

include "array/set";  equal([5,4,3,2,1])
[1,2,3,4,5]
true

include "array/set";  union([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,0]

include "array/set";  intersection([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]


#
# product
#

# ×
include "array/set"; [product]|length
[]
1

# A × ∅
include "array/set"; product
[[1,2,3],[]]
[]

# A × ∅
include "array/set"; product
[[],[1,2,3]]
[]

# A × B
include "array/set"; [product]
[[1,2,3],[4]]
[[1,4],[2,4],[3,4]]

# A⁵
include "array/set"; [product] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true

# A × B
include "array/set"; [product([1,2,3];[4])]
null
[[1,4],[2,4],[3,4]]

# A × B × C
include "array/set"; [product([1,2,3];[4];[5,6])]
null
[[1,4,5],[1,4,6],[2,4,5],[2,4,6],[3,4,5],[3,4,6]]

#
# power
#

include "array/set"; power(0)
[1,2,3]
[]

include "array/set"; [power(1)]
[1,2,3]
[[1],[2],[3]]

include "array/set"; [power(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

# A⁵
include "array/set"; [power(5)] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true

include "array/set"; power(0)
[1,2,3]
[]

include "array/set"; [power(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

#
# Kleene closures
#

include "array/set"; [limit(13;kstar)]
[1,2,3]
[[],[1],[2],[3],[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

include "array/set"; [[limit(13;kstar)],[[],limit(12;kplus)]] | .[0]==.[1]
[1,2,3]
true

include "array/set"; [[limit(13;kstar)][1:],[limit(12;kplus)]] | .[0]==.[1]
[1,2,3]
true

include "array/set"; [limit(12;kplus)]
[1,2,3]
[[1],[2],[3],[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

include "array/set"; [power(2)]==[(limit(20;kstar)|select(length==2))]
[1,2,3]
true


# vim:ai:sw=2:ts=2:et:syntax=jq
