#########################################################################
# Set array operations
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

include "array/set"; unlike
[1,2,3,4,5]
true

include "array/set"; index(3)
[2,4,5,6,7,3,2]
5

include "array/set"; .[[3]]
[2,4,5,6,7,3,2]
[5]

include "array/set"; .[[2]]
[2,4,5,6,7,3,2]
[0,6]

include "array/set"; insert(2) | insert(1)
[5,4,3]
[5,4,3,2,1]

include "array/set"; remove(2)
[5,2,4,3,2,2]
[5,4,3,2,2]

include "array/set"; remove(2)
[5,4,3]
[5,4,3]

include "array/set"; remove(2)
[5,2,4,3]
[5,4,3]

include "array"; index(2)
[5,2,4,3]
1

include "array/set"; 3 | element([4,2,5,3,2,1])
null
true

include "array/set"; [4,2,5,3,2,1] | member(2)
null
true

include "array/set";  equal([5,4,3,2,1])
[1,2,3,4,5]
true

include "array/set";  union([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,0]

include "array/set";  intersection([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]

########################################################################
# Subsets

include "array/set"; [combinations(2)]==[minus1]
[1,2,3]
true

include "array/set"; [combinations(9)]==[minus1]
[1,2,3,4,5,6,7,8,9,10]
true

include "array/set"; [combinations(2)]
[1,2,3]
[[1,2],[1,3],[2,3]]

include "array/set"; [combinations(2)]==[(limit(10;powerset)|select(length==2))]
[1,2,3]
true

#include "array/set"; [(limit(10;powerset)|select(length==2))] == ([(limit(10;powerset_u)|select(length==2))])
#[1,2,3]
#true

########################################################################
# Multi-sets

include "array/set"; [mulsets(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]] 

include "array/set"; [mulsets(2)]==[(limit(10;mulsets)|select(length==2))]
[1,2,3]
true


# vim:ai:sw=2:ts=2:et:syntax=jq
