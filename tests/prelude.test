#########################################################################
# Prelude
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

#include "prelude"; reduce .[] as $n (0; .+$n) == fold(.[0]+.[1]; 0; .[])
#[1,2,3,4]
#true

include "prelude"; [limit(6; tabulate(pow(.;2)))]
null
[0,1,4,9,16,25]


include "prelude"; failure(empty)
null
true

include "prelude"; failure(range(.))
0
true

include "prelude"; failure(.)
true
false

include "prelude"; failure(.)
false
false

include "prelude"; failure(.)
null
false

include "prelude"; failure(range(.))
8
false

include "prelude"; failure(.[])
[1,2,3]
false

include "prelude"; failure(.)
0
false

include "prelude"; failure(infinite)
null
false

include "prelude"; failure(nan)
null
false

include "prelude"; every(empty)
null
true

include "prelude"; some(empty)
null
false

########################################################################
# operators
########################################################################

# . | A  ≡  A
(. | .+2) == .+2
7
true

# A | .  ≡  A
(.+2 | .) == .+2
7
true

# empty | A  ≡  empty  
(empty | .+2)//null == null
7
true

# A | empty  ≡  empty
(.+2 | empty)//null == null
7
true

# empty , A  ≡  A
(empty , 5) == 5
null
true

# A , empty  ≡  A
(5 , empty) == 5
null
true

# A , (B , C)  ≡  (A , B) , C
[2 , (3 , 5)] == [(2 , 3) , 5]
null
true

# A | (B | C)  ≡  (A | B) | C
[.*2 | (.*3 | .*5)] == [(.*2 | .*3) | .*5]
7
true

# (A , B) | C  ≡  (A | C) , (B | C)
[(2 , 3) | .*5 ] == [(2 | .*5), (3 | .*5) ]
null
true

# NOT ALWAYS???
# A | (B , C) = (A | B) , (A | C)
[2 | (.*3 , .*5)] == [(2 | .*3) , (2 | .*5)]
null
true

include "prelude"; (cond(select(.==1))|7) , (not(select(.==1))|11)
1
7

include "prelude"; (cond(select(.==2))|7) , (not(select(.==2))|11)
1
11

########################################################################

[3 , 5 | .*2] == [(3 , 5) | .*2]
null
true

[5 | .*2 , .*3] == [5 | (.*2 , .*3)]
null
true

[5 | .*2 , .*3] == [(5 | .*2) , (5 | .*3)]
null
true

[3 , 5 | .*2] == [(3 | .*2) , (5 | .*2)]
null
true

########################################################################

[limit(7;range(77))] == [while(.<7;.+1)]
0
true

[limit(7;range(77))] == [recurse(.+1;.<7)]
0
true

[while(.<7;.+1)] == [recurse(.+1;.<7)]
0
true

include "prelude"; [recurse(.+1;.<7)] == [label $x | recurse(.+1) | if .<7 then . else break $x end]
0
true

include "prelude"; [while(.<7;.+1)] == [try (recurse(.+1) | keep(.<7)) catch canceled]
0
true


# vim:ai:sw=2:ts=2:et:syntax=jq
