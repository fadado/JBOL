#########################################################################
# Sets
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

#########################################################################
# Set functions

#
# Set construction
#

# The empty set: ∅
length
{ }
0

length
[ ]
0

# Build sets from arrays or strings
include "object"; set(.)
[3,2,1,"k"]
{"1":true,"2":true,"3":true,"k":true}

include "object"; set(.)
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.)
"uioaaeiouoaeiouae"
{"a":true,"e":true,"i":true,"o":true,"u":true}

# Set members as a list
include "object"; set(.) | keys
"aeiuo"
["a","e","i","o","u"]

# Set cardinality
include "object"; set(.) | length
"aeiuo"
5

#
# Adding and deleting members
#

include "object"; set(.) | del(.e)
"aeiuo"
{"a":true,"i":true,"o":true,"u":true}

include "object"; set(.) | del(.e) | .e = true
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.) | (.o,.u) = true
"aei"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.) | del(.e,.a,.u)
"aeiuo"
{"i":true,"o":true}

include "object"; set(.) | del(.e) | . += {e:true}
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.) | del(.e,.a,.u) | . += {u:true,a:true,e:true}
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.) | del(.e,.a,.u) | (.e,.a,.u) = true
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "object"; set(.) | .x = true
"abc"
{"a":true,"b":true,"c":true,"x":true}

#
# Set membership
#

# ∋
include "object"; set(.) | has("k")
[3,2,1,"k"]
true

contains(["k"])
[3,2,1,"k"]
true

# ∋
include "object"; set(.) | .k
[3,2,1,"k"]
true

# ∋
include "object"; set(.) | has("h")
[3,2,1,"k"]
false

contains(["h"])
[3,2,1,"k"]
false

# ∋
include "object"; set(.) | if .h then true else false end
[3,2,1,"k"]
false

# ∋
include "object"; set(.) | .h
[3,2,1,"k"]
null

# ∌
include "object"; set(.) | .h|not
[3,2,1,"k"]
true

contains(["h"])|not
[3,2,1,"k"]
true

# ∌
include "object"; set(.) | .h==null
[3,2,1,"k"]
true

# ∈
include "object"; set(.) as $s | "k" | in($s)
[3,2,1,"k"]
true

inside([3,2,1,"k"])
["k"] 
true

# ∈
include "object"; set(.) as $s | "h" | in($s)
[3,2,1,"k"]
false

inside([3,2,1,"k"])
["h"] 
false

# ∈
include "object"; set(.) as $s | "h" | in($s)
[3,2,1,"k"]
false

# ∉
include "object"; set(.) as $s | "h" | in($s)|not
[3,2,1,"k"]
true

inside([3,2,1,"k"])|not
["h"] 
true

# null => false
include "object"; set(.) | .h//false
[3,2,1,"k"]
false

#
# Common sets operations
#

# ∪
include "object"; set("aiu") + set("eo")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# ∪
include "object"; set("aiu") * set("eo")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# ∩
include "object"; set("aeiouxyz") | intersection(set("xyz12345"))
null
{"x":true,"y":true,"z":true}

# ∩ ∅
include "object"; (set("xyz") | intersection(set("abc"))) == {}
null
true

# ∩ ∪
include "object"; set("aiu") + set("eo") | intersection(set("eo"))
null
{"o":true,"e":true}

include "object"; set("aeiou") | intersection(set("eo")) + set("aiu")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# –
include "object"; set("aeiou") | difference(set("abc"))
null
{"e":true,"i":true,"o":true,"u":true}

["a","e","i","o","c","u"] - ["a","b","c"]
null
["e","i","o","u"]

# ⊂
include "object"; set("xyz") as $a | set("xyz12345") as $b | $a != $b and ($a | intersection($b)) == $a
null
true

# ⊂
include "object"; set("xyz") | inside(set("xyz12345"))
null
true

["x","y","z"] | inside(["x","1","z","y","2","3","4","5"])
null
true

# ⊃ 
include "object"; set("xyz123") as $a | set("xyz") as $b | $a != $b and ($a | intersection($b)) == $b
null
true

include "object"; set(.) | contains(set("k"))
[3,2,1,"k"]
true

# ≡ ∅
. == { }
{ }
true

# ≡
include "object"; set("xyz") == {"y":true,"x":true,"z":true}
null
true

# ≢ ∅
include "object"; set("xyz") != { }
null
true

# vim:ai:sw=2:ts=2:et:syntax=jq
