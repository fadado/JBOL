#########################################################################
# Choice
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

# Sub-sets

include "generator/choice"; [subset(2)]==([subset1_u]|sort)
[1,2,3]
true

include "generator/choice"; [subset(2)]
[1,2,3]
[[1,2],[1,3],[2,3]]

include "generator/choice"; [subset(2)]==[(limit(10;subset)|select(length==2))]
[1,2,3]
true

include "generator/choice"; [(limit(10;subset)|select(length==2))] == ([(limit(10;subset_u)|select(length==2))]|sort)
[1,2,3]
true

# Multi-sets

include "generator/choice"; [mulset(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]] 

include "generator/choice"; [mulset(2)]==[(limit(10;mulset)|select(length==2))]
[1,2,3]
true

# Sub-seqs

include "generator/choice"; [subseq(2)]
[1,2,3]
[[1,2],[2,1],[1,3],[3,1],[2,3],[3,2]]

include "generator/choice"; [subseq(2)]==[(limit(10;subseq)|select(length==2))]
[1,2,3]
true

# Multi-seqs

include "generator/choice"; [mulseq(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

include "generator/choice"; [mulseq(2)]==[(limit(20;mulseq)|select(length==2))]
[1,2,3]
true

#

include "generator/choice"; [derangement]
[1,2,3]
[[2,3,1],[3,1,2]]

include "generator/choice"; [circle]
[1,2,3]
[[1,2,3],[1,3,2]]

include "generator/choice"; [arrangement]
[1,1,2]
[[1,1,2],[1,2,1],[2,1,1]]

include "generator/choice"; [disposition]
[1,1,2]
[[],[1],[2],[1,1],[1,2],[1,1,2]]

# vim:ai:sw=2:ts=2:et:syntax=jq
