#########################################################################
# Choice
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

########################################################################
# Sub-sets
########################################################################

include "generator/choice"; [combinations(2)]==[subsets_1]
[1,2,3]
true

include "generator/choice"; [combinations(9)]==[subsets_1]
[1,2,3,4,5,6,7,8,9,10]
true

include "generator/choice"; [combinations(2)]
[1,2,3]
[[1,2],[1,3],[2,3]]

include "generator/choice"; [combinations(2)]==[(limit(10;powerset)|select(length==2))]
[1,2,3]
true

#include "generator/choice"; [(limit(10;powerset)|select(length==2))] == ([(limit(10;subsets)|select(length==2))])
#[1,2,3]
#true

########################################################################
# Multi-sets
########################################################################

include "generator/choice"; [mulsets(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]] 

include "generator/choice"; [mulsets(2)]==[(limit(10;mulsets)|select(length==2))]
[1,2,3]
true

########################################################################
# Sub-seqs
########################################################################

include "generator/choice"; [permutations(2)]
[]
[]

include "generator/choice"; [permutations(2)]
[1]
[]

include "generator/choice"; [permutations(1)]
[1]
[[1]]

include "generator/choice"; [permutations(1)]
[1,2]
[[1],[2]]

include "generator/choice"; [permutations(2)]
[1,2]
[[1,2],[2,1]]

include "generator/choice"; [permutations(2)]
[1,2,3]
[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]

include "generator/choice"; [permutations(2)]==([(limit(10;subseqs)|select(length==2))])
[1,2,3]
true

include "generator/choice"; [permutations]
[1,2,3]
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

########################################################################
# Multi-seqs
########################################################################

#
# product
#

# A × ∅
include "generator/choice"; product
[[1,2,3],[]]
[]

# A × ∅
include "generator/choice"; product
[[],[1,2,3]]
[]

# A × B
include "generator/choice"; [product]
[[1,2,3],[4]]
[[1,4],[2,4],[3,4]]

# A⁵
include "generator/choice"; [product] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true

# A × B
include "generator/choice"; [product([1,2,3];[4])]
null
[[1,4],[2,4],[3,4]]

# A × B × C
include "generator/choice"; [product([1,2,3];[4];[5,6])]
null
[[1,4,5],[1,4,6],[2,4,5],[2,4,6],[3,4,5],[3,4,6]]

#
# powers
#

include "generator/choice"; powers(0)
[1,2,3]
[]

include "generator/choice"; powers(1)
[1,2,3]
[1,2,3]

include "generator/choice"; [powers(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

# A⁵
include "generator/choice"; [powers(5)] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true

#
#
#
include "generator/choice"; [words(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

include "generator/choice"; [words(2)]==[(limit(20;words)|select(length==2))]
[1,2,3]
true

########################################################################
#
########################################################################

include "generator/choice"; [derangement]
[1,2,3]
[[2,3,1],[3,1,2]]

include "generator/choice"; [cicles]
[1,2,3]
[[1,2,3],[1,3,2]]

#include "generator/choice"; [arrangement]
#[1,1,2]
#[[1,1,2],[1,2,1],[2,1,1]]

#include "generator/choice"; [disposition]
#[1,1,2]
#[[],[1],[2],[1,1],[1,2],[1,1,2]]

# vim:ai:sw=2:ts=2:et:syntax=jq
