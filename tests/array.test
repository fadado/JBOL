#########################################################################
# Generic array operations
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

########################################################################
# Combinatorics on Words

# Catenation
. + [1,2,3]
[3,4,5]
[3,4,5,1,2,3]

# Length of w
length
[3,4,5]
3

# Number of a's in w
.[["a"]] | length
[1,"a",3,4,"a",5]
2

include "array"; count("a")
[1,"a",3,4,"a",5]
2

include "array"; count("x")
[1,"a",3,4,"a",5]
0

# Alphabet of w
unique
[1,5,2,3,4,2,5]
[1,2,3,4,5]

# Reverse
reverse
[1,2,3,4,5]
[5,4,3,2,1]

# Factor, proper factor?
include "array"; . as $u | []|factor($u)
[1,2, 3,4,2, 5]
true

include "array"; . as $u | [3,4,2]|factor($u)
[]
false

include "array"; . as $u | []|pfactor($u)
[1,2, 3,4,2, 5]
false

include "array"; . as $u | [3,4,2]|pfactor($u)
[]
false

include "array"; . as $u | [3,4,2]|factor($u)
[1,2, 3,4,2, 5]
true

include "array"; . as $u | [3,4,2]|pfactor($u)
[3,4,2]
false

include "array"; . as $u | [3,4,2]|pfactor($u)
[1,2, 3,4,2, 5]
true

include "array"; . as $u | [3,4,2]|factor($u)
[3,4,2,1,2]
true

include "array"; . as $u | [3,4,2]|factor($u)
[2,1,3,3,4,2]
true

# Prefix, proper prefix?
include "array"; . as $u | [3,4,2]|prefix($u)
[3,4,2,2,1,3,3,4,2]
true

include "array"; . as $u | [3,4,2]|prefix($u)
[3,4,2]
true

include "array"; . as $u | [3,4,2]|prefix($u)
[3,2]
false

include "array"; . as $u | [3,4,2]|pprefix($u)
[3,4,2,2,1,3,3,4,2]
true

include "array"; . as $u | [3,4,2]|pprefix($u)
[3,4,2]
false

include "array"; . as $u | [3,4,2]|prefix($u)
[3,2]
false

# Suffix, proper suffix?
include "array"; . as $u | [3,4,2]|suffix($u)
[1,2,3,4,2]
true

include "array"; . as $u | [3,4,2]|suffix($u)
[1,2,3,4,2,3]
false

include "array"; . as $u | [3,4,2]|psuffix($u)
[1,2,3,4,2,3]
false

include "array"; . as $u | [3,4,2]|psuffix($u)
[2,3,4,2]
true

########################################################################

include "array"; index(3)
[1,2,3,4,5]
2

include "array"; reverse
[1,2,3,4,5]
[5,4,3,2,1]

include "array"; rotate(1)
[1,2,3,4,5]
[2,3,4,5,1]

include "array"; rotate(-1)
[1,2,3,4,5]
[5,1,2,3,4]

include "array"; sorted
[1,9,3,4,5]
false

include "array"; sorted
[3]
true

include "array"; sorted
[]
true

include "array"; sorted
[1,2,3,4,5]
true

########################################################################

include "array/set"; index(3)
[2,4,5,6,7,3,2]
5

include "array/set"; .[[3]]
[2,4,5,6,7,3,2]
[5]

include "array/set"; .[[2]]
[2,4,5,6,7,3,2]
[0,6]

include "array/set"; insert(2) | insert(1)
[5,4,3]
[5,4,3,2,1]

include "array"; remove(2)
[5,4,3]
[5,4,3]

include "array"; remove(2)
[5,2,4,3,2,2]
[5,4,3]

include "array/set"; remove(2)
[5,4,3]
[5,4,3]

include "array/set"; remove(2)
[5,2,4,3]
[5,4,3]

include "array"; index(2)
[5,2,4,3]
1

include "array/set"; 3 | element([4,2,5,3,2,1])
null
true

include "array/set"; [4,2,5,3,2,1] | member(2)
null
true

include "array/set";  equal([5,4,3,2,1])
[1,2,3,4,5]
true

include "array/set";  union([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,0]

include "array/set";  intersection([1,2,3,4,5,6,7,8,9,0])
[1,2,3,4,5]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]

include "array/set";  . - [6,7,8,9,0]
[1,2,3,4,5,6,7,8,9]
[1,2,3,4,5]


#
# product
#

# A × ∅
include "array/set"; product
[[1,2,3],[]]
[]

# A × ∅
include "array/set"; product
[[],[1,2,3]]
[]

# A × B
include "array/set"; [product]
[[1,2,3],[4]]
[[1,4],[2,4],[3,4]]

# A⁵
include "array/set"; [product] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true

# A × B
include "array/set"; [product([1,2,3];[4])]
null
[[1,4],[2,4],[3,4]]

# A × B × C
include "array/set"; [product([1,2,3];[4];[5,6])]
null
[[1,4,5],[1,4,6],[2,4,5],[2,4,6],[3,4,5],[3,4,6]]

#
# power
#

include "array/set"; power(0)
[1,2,3]
[]

include "array/set"; power(1)
[1,2,3]
[1,2,3]

include "array/set"; [power(2)]
[1,2,3]
[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]

# A⁵
include "array/set"; [power(5)] | length == (5*5*5*5*5)
[[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]
true
# vim:ai:sw=2:ts=2:et:syntax=jq
