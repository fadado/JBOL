#########################################################################
# Text functions
#
# Classic string functions are easy to implement. Also functions
# inspired in the Icon Language, like `find`.
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

include "string"; remove("aeiou")
"loquenomesabiayo"
"lqnmsby"

#
# Icon style
#
include "string"; center(8)
"AEI"
"  AEI   "

include "string"; center(8)
"AE"
"   AE   "

include "string"; center(9)
"AEI"
"   AEI   "

include "string"; center(9)
"AE"
"   AE    "

include "string"; left(10)
"AEIOU"
"     AEIOU"

include "string"; right(10)
"AEIOU"
"AEIOU     "

include "string"; none("aeiou")
"xxoops"
2

include "string"; none("aeiou")
"axixo"
# empty

include "string"; many("aeiou")
"oops"
2

include "string"; many("aeiou")
"xixo"
# empty

include "string"; notany("aeiou")
"Asperger"
1

include "string"; notany("aeiou")
"Asperger"
1

include "string"; any("aeiou")
"asperger"
1

include "string"; any("aeiou")
"Asperger"
# empty

include "string"; match("mi ma")
"mi mama me mima"
5

include "string"; match("mi ma"; 9)
"no se si mi mama me mima"
14

#
# translate
#


include "string"; import "string/ascii" as ascii; translate(ascii::ttupper)
"kaleidoscope"
"KALEIDOSCOPE"

include "string"; import "string/ascii" as ascii; translate(ascii::ttlower)
"KALEIDOSCOPE"
"kaleidoscope"

# rot13
include "string"; import "string/ascii" as ascii; def R: translate(rot13); . == (R|R)
"Joan"
true

# flip
include "string"; import "string/ascii" as ascii; translate(table(ascii::alpha; ascii::ALPHA))
"Una Casa"
"uNA cASA"

# remove
include "string"; translate("01234567890"; "")
"asdhaisd867asd876asiduhakjdshads8a08d60asdioahsdasd89a0sd"
"asdhaisdasdasiduhakjdshadsadasdioahsdasdasd"

include "string"; import "string/ascii" as ascii; translate(ascii::cntrl; "")
"a\ne\rg\tl"
"aegl"

# preserve
include "string"; import "string/ascii" as ascii; translate(ptable(.; ascii::lower))
"XXa\nUUe\rg\tlZZ"
"aegl"

include "string"; import "string/ascii" as ascii; translate(translate(ascii::lower; ""); "")
"XXa\nUUe\rg\tlZZ"
"aegl"

# trim
include "string"; ltrim
""
""

include "string"; rtrim
""
""

include "string"; ltrim
"        "
""

include "string"; rtrim
"         "
""

include "string"; ltrim
"aaaaa"
"aaaaa"

include "string"; rtrim
"aaaaa"
"aaaaa"

include "string"; ltrim
"      aaaaa"
"aaaaa"

include "string"; rtrim
"aaaaa        "
"aaaaa"

include "string"; trim
"      aaaaa        "
"aaaaa"

include "string"; trim
"a b c"
"a b c"

include "string"; ltrim
" a b c"
"a b c"

include "string"; rtrim
"a b c "
"a b c"

include "string"; trim
" a b c "
"a b c"

#
# char, ord
#

include "string"; ord("A")
null
65

include "string"; char(65) == "A"
null
true

include "string"; ord(char(65)) == 65 and char(ord("A")) == "A"
null
true

include "string"; [ord("€"), char(8364)]
null
[8364, "€"]

# vim:ai:sw=2:ts=2:et:syntax=jq
