########################################################################
# a sequence is an enumerated collection of objects...
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
########################################################################

# N, Z+, Z- #############################################################

include "math/sequence"; limit(1; naturals)
null
0

include "math/sequence"; [limit(3; naturals)]
null
[0,1,2]

include "math/sequence"; [limit(3; odds)]
null
[1,3,5]

include "math/sequence"; [limit(3; evens)]
null
[0,2,4]

include "math/sequence"; [limit(10; odds)] == [limit(10; naturals|select(.%2!=0))]
null
true

include "math/sequence"; [limit(10; evens)] == [limit(10; naturals|select(.%2==0))]
null
true

include "math/sequence"; [limit(10; positives)] == [limit(10; range(1;11))]
null
true

include "math/sequence"; [limit(10; negatives)] == [limit(10; range(-1;-33;-1))]
null
true

#
# seq
#

include "math/sequence"; [limit(6; range(7; infinite))]
null
[7,8,9,10,11,12]

include "math/sequence"; [limit(6; arithmetic(7; 2))]
null
[7,9,11,13,15,17]

include "math/sequence"; [limit(6; arithmetic(0; -1))]
null
[0,-1,-2,-3,-4,-5]

#########################################################################
#
#########################################################################

# Products of `n`
include "math/sequence"; [limit(11; multiples)]
7
[0,7,14,21,28,35,42,49,56,63,70]

# Powers of `n`
include "math/sequence"; limit(1; powers)
0
1

include "math/sequence"; limit(1; powers)
2
1

include "math/sequence"; [limit(2; powers)]
2
[1,2]

include "math/sequence"; [limit(3; powers)]
2
[1,2,4]

include "math/sequence"; [limit(10; powers)]
2
[1,2,4,8,16,32,64,128,256,512]

include "math/sequence"; nth(10; powers(7)) == pow(7; 10)
null
true

include "math/sequence"; [limit(.; powers)]
7
[1,7,49,343,2401,16807,117649]

include "math/sequence"; [limit(11; powers(2))]==[limit(11; powers2)]
null
true

# Factorial
include "math/sequence"; [limit(6; factorials)]
null
[1,1,2,6,24,120]

include "math/sequence"; [limit(13; triangulars)]
null
[0,1,3,6,10,15,21,28,36,45,55,66,78]

# Fibonacci
include "math/sequence"; [limit(21; fibonacci)]
null
[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765]

include "math/sequence"; nth(70; fibonacci)
null
190392490709135

include "math/sequence"; include "stream"; limit(2; drop(70; fibonacci))
null
190392490709135
308061521170129

## Golden ratio
include "math/sequence"; include "stream"; [limit(2; drop(70; fibonacci))] | (.[1]/.[0])*100000|floor|./100000
null
1.61803

# squares, cubes
include "math/sequence"; [limit(6; squares)]
null
[0,1,4,9,16,25]

include "math/sequence"; [limit(6; cubes)]
null
[0,1,8,27,64,125]

#
include "math/sequence"; [limit(20; primes)]
null
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]

include "math/sequence"; [limit(3; reciprocals(positives))]
null
[1,0.5,0.3333333333333333]

include "math/sequence"; [limit(3; harmonic)]
null
[1,0.5,0.3333333333333333]

include "math/sequence"; [range(4)]+[0,1,2,3] == [limit(8;moduli(4))]
null
true

include "math/sequence"; include "stream"; [limit(8; moduli(4))] == [limit(8; repeat(range(4)))]
null
true

include "math/sequence"; include "stream"; [limit(16; leibniz)]
null
[0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]

# replicate ############################################################

include "math/sequence"; [range(4)|8]
null
[8,8,8,8]

include "math/sequence"; [range(4)|"a"] | join("")
null
"aaaa"

# divisors #############################################################

include "math/sequence"; range(1;11) as $n | [divisors($n)]
null
[]
[1]
[1]
[1,2]
[1]
[1,2,3]
[1]
[1,2,4]
[1,3]
[1,2,5]

include "math/sequence"; range(1;11) as $n | [divisors1($n)]
null
[]
[]
[]
[2]
[]
[2,3]
[]
[2,4]
[3]
[2,5]

# partitions ###########################################################

include "math/sequence"; [partition(3)]
null
[[1,1,1], [2,1], [3]]

include "math/sequence"; partition(0)
null
[]

include "math/sequence"; partition(1)
null
[1]

# vim:ai:sw=2:ts=2:et:syntax=jq
