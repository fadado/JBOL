#########################################################################
# Conversion tables
#
# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.
#########################################################################

#
# translate
#


include "string/table"; import "string/ascii" as ascii; ascii::toupper == translate(ascii::tt_toupper)
"kaleidoscope"
true

include "string/table"; import "string/ascii" as ascii; translate(ascii::tt_toupper)
"kaleidoscope"
"KALEIDOSCOPE"

include "string/table"; import "string/ascii" as ascii; ascii::tolower == translate(ascii::tt_tolower)
"KALEIDOSCOPE"
true

include "string/table"; import "string/ascii" as ascii; translate(ascii::tt_tolower)
"KALEIDOSCOPE"
"kaleidoscope"

# rot13
include "string/table"; import "string/ascii" as ascii; def R: translate(rot13); . == (R|R)
"Joan"
true

# flip
include "string/table"; import "string/ascii" as ascii; translate(new(ascii::alpha; ascii::ALPHA))
"Una Casa"
"uNA cASA"

# remove
include "string/table"; translate("01234567890"; "")
"asdhaisd867asd876asiduhakjdshads8a08d60asdioahsdasd89a0sd"
"asdhaisdasdasiduhakjdshadsadasdioahsdasdasd"

include "string/table"; import "string/ascii" as ascii; translate(ascii::cntrl; "")
"a\ne\rg\tl"
"aegl"

# preserve
include "string/table"; import "string/ascii" as ascii; translate(preserve(.; ascii::lower))
"XXa\nUUe\rg\tlZZ"
"aegl"

include "string/table"; import "string/ascii" as ascii; translate(translate(ascii::lower; ""); "")
"XXa\nUUe\rg\tlZZ"
"aegl"

# vim:ai:sw=2:ts=2:et:syntax=jq
