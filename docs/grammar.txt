/*
 * JQ simplified grammar extracted from the files 'parser.y' and 'lexer.l'
 */

/*
 * IDENT:	([a-zA-Z_][a-zA-Z_0-9]*::)*[a-zA-Z_][a-zA-Z_0-9]*
 * FIELD:	\.[a-zA-Z_][a-zA-Z_0-9]* 
 * LITERAL:	[0-9.]+([eE][+-]?[0-9]+)?
 * FORMAT:	"@"[a-zA-Z0-9_]+
 */

TopLevel:
	Module Imports Exp  |
	Module Imports FuncDefs 

Module:
	%empty  |
	"module" Exp ';' 

Imports:
	%empty  |
	Import Imports 

FuncDefs:
	%empty  |
	FuncDef FuncDefs 

Exp:
	FuncDef Exp |
	Term "as" Pattern '|' Exp  |
	"reduce" Term "as" Pattern '(' Exp ';' Exp ')'  |
	"foreach" Term "as" Pattern '(' Exp ';' Exp ';' Exp ')'  |
	"foreach" Term "as" Pattern '(' Exp ';' Exp ')'  |
	"if" Exp "then" Exp ElseBody  |
	"try" Exp "catch" Exp  |
	"try" Exp  |
	"label" '$' IDENT '|' Exp  |
	Exp '?'       |
	Exp '=' Exp   |
	Exp "or" Exp  |
	Exp "and" Exp |
	Exp "//" Exp  |
	Exp "//=" Exp |
	Exp "|=" Exp  |
	Exp '|' Exp   |
	Exp ',' Exp   |
	Exp '+' Exp   |
	Exp "+=" Exp  |
	'-' Exp       |
	Exp '-' Exp   |
	Exp "-=" Exp  |
	Exp '*' Exp   |
	Exp "*=" Exp  |
	Exp '/' Exp   |
	Exp '%' Exp   |
	Exp "/=" Exp  |
	Exp "%=" Exp  |
	Exp "==" Exp  |
	Exp "!=" Exp  |
	Exp '<' Exp   |
	Exp '>' Exp   |
	Exp "<=" Exp  |
	Exp ">=" Exp  |
	Term 

Import:
	ImportWhat ';'  |
	ImportWhat Exp ';' 

ImportWhat:
	"import" ImportFrom "as" '$' IDENT  |
	"import" ImportFrom "as" IDENT  |
	"include" ImportFrom 

ImportFrom:
	  String 

FuncDef:
	"def" IDENT ':' Exp ';'  |
	"def" IDENT '(' Params ')' ':' Exp ';' 

Params:
	Param  |
	Params ';' Param 

Param:
	'$' IDENT  |
	IDENT 

String:
	"\""  QQString "\""  |
	FORMAT "\""  QQString "\"" 

QQString:
	%empty  |
	QQString [^\\\"]+ | \\[^u(]|\\u[a-zA-Z0-9]{0,4})+  |
	QQString "\\(" Exp ")"

ElseBody:
	"elif" Exp "then" Exp ElseBody  |
	"else" Exp "end" 

ExpD:
	ExpD '|' ExpD  |
	'-' ExpD  |
	Term 

Term:
	'.'   |
	".."  |
	"break" '$' IDENT  |
	Term FIELD '?'  |
	FIELD '?'  |
	Term '.' String '?'  |
	'.' String '?'  |
	Term FIELD |
	FIELD |
	Term '.' String |
	'.' String |
	Term '[' Exp ']' '?'  |
	Term '[' Exp ']' |
	Term '[' ']' '?'  |
	Term '[' ']' |
	Term '[' Exp ':' Exp ']' '?'  |
	Term '[' Exp ':' ']' '?'  |
	Term '[' ':' Exp ']' '?'  |
	Term '[' Exp ':' Exp ']' |
	Term '[' Exp ':' ']' |
	Term '[' ':' Exp ']' |
	LITERAL |
	String  |
	FORMAT  |
	'(' Exp ')'  |
	'[' Exp ']'  |
	'[' ']'      |
	'{' MkDict '}'  |
	'$' "__loc__"   |
	'$' IDENT  |
	IDENT  |
	IDENT '(' Args ')'

Args:
	Arg  |
	Args ';' Arg 

Arg:
	Exp 

Pattern:
       '$' IDENT  |
	'[' ArrayPats ']'  |
	'{' ObjPats '}' 

ArrayPats:
	 Pattern  |
	ArrayPats ',' Pattern 

ObjPats:
	ObjPat  |
	ObjPats ',' ObjPat 

ObjPat:
	'$' IDENT  |
	IDENT ':' Pattern   |
	Keyword ':' Pattern |
	String ':' Pattern  |
	'(' Exp ')' ':' Pattern

Keyword:
	"as"      |
	"def"     |
	"module"  |
	"import"  |
	"include" |
	"if"      |
	"then"    |
	"else"    |
	"elif"    |
	"reduce"  |
	"foreach" |
	"end"     |
	"and"     |
	"or"      |
	"try"     |
	"catch"   |
	"label"   |
	"break"   |
	"__loc__" 

MkDict:
	%empty  |
	MkDictPair 
	| MkDictPair ',' MkDict 

MkDictPair:
	IDENT ':' ExpD 
	| Keyword ':' ExpD 
	| String ':' ExpD 
	| String 
	| '$' IDENT 
	| IDENT 
	| '(' Exp ')' ':' ExpD 

/*
vim:syntax=yacc
*/
